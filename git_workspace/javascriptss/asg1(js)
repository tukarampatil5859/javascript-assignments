Assignment no : 1

console in JavaScript
Web console

A Web console is a tool which is mainly used to log information associated with a web page like: network requests, javascript, security errors, warnings, CSS etc. It enables us to interact with a web page by executing javascript expression in the contents of the page.

Console object

In javascript, the console is an object which provides access to the browser debugging console. We can open a console in web browser by using: Ctrl + Shift + K for windows and Command + Option + K for Mac. The console object provides us with several different methods, like :

log()
error()
warn()
clear()
time() and timeEnd()
table()
count()
group() and groupEnd()
custom console logs

Letâ€™s look at all these methods one by one.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


>>> console.log()

Mainly used to log(print) the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc.

// console.log() method 
console.log('abc'); 
console.log(1); 
console.log(true); 
console.log(null); 
console.log(undefined); 
console.log([1, 2, 3, 4]); // array inside log 
console.log({a:1, b:2, c:3}); // object inside log 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

console.error()

Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.

// console.error() method  
console.error('This is a simple error');  

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

console.warn()

Used to log warning message to the console. By default the warning message will be highlighted with yellow color.


// console.warn() method  
console.warn('This is a warning.');  

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Q2) want to discuss var, let and const keywords in detail.

Var
The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable.

Example: var a =10;

Variable declarations are processed before the execution of the code.
The scope of a JavaScript variable declared with var is its current execution context.
The scope of a JavaScript variable declared outside the function is global.
Consider the following code snippet.

function nodeSimplified(){
  var a =10;
  console.log(a);  // output 10
  if(true){
   var a=20;
   console.log(a); // output 20
  }
  console.log(a);  // output 20
}
In the above code, you can find, when the variable is updated inside the if loop, that the value of variable "a" updated 20 globally, hence outside the if loop the value persists. It is similar to the Global variable present in other languages. But, be sure to use this functionality with great care because there is the possibility of overriding an existing value.

let
The let statement declares a local variable in a block scope. It is similar to var, in that we can optionally initialize the variable.

Example: let a =10;

The let statement allows you to create a variable with the scope limited to the block on which it is used.
It is similar to the variable we declare in other languages like Java, .NET, etc.
Consider the following code snippet.

function nodeSimplified(){
  let a =10;
  console.log(a);  // output 10
  if(true){
   let a=20;
   console.log(a); // output 20
  }
  console.log(a);  // output 10
}
It is almost the same behavior we see in most language.

function nodeSimplified(){
  let a =10;
  let a =20; //throws syntax error
  console.log(a); 
}
Error Message: Uncaught SyntaxError: Identifier 'a' has already been declared.

However, with var, it works fine.

function nodeSimplified(){ 
  var a =10;   
  var a =20;   
  console.log(a);  //output 20 
}
The scope will be well maintained with a let statement and when using an inner function the let statement makes your code clean and clear.

I hope the above examples will help you better understand the var and let commands and if you have any queries please write me in the comment section.

const
const statement values can be assigned once and they cannot be reassigned. The scope of const statement works similar to let statements.

Example: const a =10;

function nodeSimplified(){
  const MY_VARIABLE =10;
  console.log(MY_VARIABLE);  //output 10 
}
As per usual, naming standards dictated that we declare the const variable in capital letters. const a =10 will work the same way as the code given above. Naming standards should be followed to maintain the code for the long run.

Question: What will happen when we try to reassign the const variable?
Consider the following code snippet.

function nodeSimplified(){
  const MY_VARIABLE =10;
  console.log(MY_VARIABLE);  //output 10
  MY_VARIABLE =20;           //throws type error
  console.log(MY_VARIABLE); 
}
Error Message : Uncaught TypeError: Assignment to constant variable.

The code will throw an error when we try to reassign the existing const variable.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





